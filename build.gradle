plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version "7.15.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    enabled = false
}

// テンポラリディレクトリのパスを定義する
ext.domaResourcesDir = "${buildDir}/tmp/doma-resources"

task extractDomaResources(type: Copy, dependsOn: processResources)  {
    from processResources.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
    into domaResourcesDir
    duplicatesStrategy 'exclude'
}

task copyDomaResources(type: Copy, dependsOn: extractDomaResources)  {
    from domaResourcesDir
    into compileJava.destinationDirectory
    duplicatesStrategy 'exclude'
}

compileJava {
    // 上述のタスクに依存させる
    dependsOn copyDomaResources
    // テンポラリディレクトリをcompileJavaタスクの入力ディレクトリに設定する
    inputs.dir domaResourcesDir
    options.encoding = 'UTF-8'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'

    implementation("org.seasar.doma:doma-core:2.49.0")
    annotationProcessor("org.seasar.doma:doma-processor:2.49.0")
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: '1.12.116'

    implementation group: 'javax.inject', name: 'javax.inject', version: '1'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    implementation 'org.springframework:spring-jms'
    implementation 'org.springframework:spring-context'
    implementation 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1'
    implementation group: 'com.amazonaws', name: 'amazon-sqs-java-messaging-lib', version: '1.0.8'


    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'

    testImplementation 'org.dbunit:dbunit:2.6.0'
    testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
}

task cleanDB1(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    url = 'jdbc:mysql://localhost:33306/firstdb'
    user = 'root'
    password = 'password'
}

//task cleanDB2(type: org.flywaydb.gradle.task.FlywayCleanTask) {
//    url = 'jdbc:mysql://localhost:23306/mallie_local'
//    user = 'root'
//    password = 'password'
//}

task migrateDB1(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    url = 'jdbc:mysql://localhost:33306/firstdb'
    user = 'root'
    password = 'password'
    locations = ['filesystem:src/main/resources/db/migration']
}

//task migrateDB2(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
//    url = 'jdbc:mysql://localhost:23306/mallie_local'
//    user = 'root'
//    password = 'password'
//    locations = ['filesystem:src/main/resources/db2/migration']
//}

// ./gradlew cleanDB1 cleanDB2
// ./gradlew migrateDB1 migrateDB2

// ./gradlew cleanDB1
// ./gradlew migrateDB1

tasks.named('test') {
    useJUnitPlatform()
}
